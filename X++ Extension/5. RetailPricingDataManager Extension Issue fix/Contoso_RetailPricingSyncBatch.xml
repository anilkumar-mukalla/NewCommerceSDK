<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DXC_RetailPricingSyncBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DXC_RetailPricingSyncBatch extends RunBaseBatch  implements BatchRetryable
{
    EcoResCategoryHierarchy ecoResCategoryHierarchy;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        ecoResCategoryHierarchy
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            SalesId salesId = '013326';
            SalesTable _salesTable = SalesTable::find(salesId);
            SalesLine salesLine;
            while select salesLine
                where salesLine.SalesId == salesId
            {
                utcdatetime createdDateTime =  DateTimeUtil::utcNow();
                createdDateTime = DateTimeUtil::applyTimeZoneOffset(createdDateTime, RetailChannelTable::findByRecId(_salesTable.RetailChannelTable).ChannelTimeZone);

                boolean hasMarkdown = DXC_RetailMarkDownPriceCheck::hasMarkdown(_salesTable.RetailChannelTable,
                    salesLine.ItemId,
                    salesLine.RetailVariantId,
                    DateTimeUtil::date(createdDateTime),
                    DateTimeUtil::time(createdDateTime));

                if (hasMarkdown) // default = false, only update when hasMarkdown = true
                {
                    print("the sales line has mark down");
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DXC_RetailPricingSyncBatch construct()
    {
        return new DXC_RetailPricingSyncBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "DXC Pricing MarkDown Check";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        DXC_RetailPricingSyncBatch DXC_RetailPricingSyncBatch = DXC_RetailPricingSyncBatch::construct();

        if(DXC_RetailPricingSyncBatch.prompt())
        {
            DXC_RetailPricingSyncBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>